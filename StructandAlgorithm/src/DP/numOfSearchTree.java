package DP;

/**
 * @author renyujie518
 * @version 1.0.0
 * @ClassName numOfSearchTree.java
 * @Description 给定一个整数 n，求以 1 ... n 为节点组成的二叉搜索树(左小右大)有多少种？
 *
 * 具体的分析步骤建议去看：
 * https://programmercarl.com/0096.%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.html#%E6%80%9D%E8%B7%AF
 * 这里需要背诵下结论：
 * dp[i] ： 1到i为节点组成的二叉搜索树的个数为dp[i]。
 * dp[3]，就是 元素1为头结点搜索树的数量 + 元素2为头结点搜索树的数量 + 元素3为头结点搜索树的数量
 *
 * 元素1为头结点搜索树的数量 = 右子树有2个元素的搜索树数量 * 左子树有0个元素的搜索树数量
 * 元素2为头结点搜索树的数量 = 右子树有1个元素的搜索树数量 * 左子树有1个元素的搜索树数量
 * 元素3为头结点搜索树的数量 = 右子树有0个元素的搜索树数量 * 左子树有2个元素的搜索树数量
 *
 * 有2个元素的搜索树数量就是dp[2]。
 * 有1个元素的搜索树数量就是dp[1]。
 * 有0个元素的搜索树数量就是dp[0]。
 * 所以dp[3] = dp[2] * dp[0] + dp[1] * dp[1] + dp[0] * dp[2]
 *
 * 递推公式：
 * dp[i] += dp[以j为头结点左子树节点数量] * dp[以j为头结点右子树节点数量]
 * j相当于是头结点的元素，从1遍历到i为止。
 * 所以递推公式：dp[i] += dp[j - 1] * dp[i - j]; （时刻注意【】里的含义，是个数）
 * j-1 为j为头结点左子树节点数量，i-j 为以j为头结点右子树节点数量
 * （j-1）+(i-j) = i-1  代表出去头结点所有的个数，分配给左右子树，先给左树分j个和1个头节点（所以-1），剩余i - j个分给右树
 * @createTime 2021年09月02日 16:54:00
 */
public class numOfSearchTree {
    public int numOfSearchTree(int n) {
        //初始化 dp 数组
        int[] dp = new int[n + 1];
        //初始化0个节点和1个节点的情况
        dp[0] = 1;
        dp[1] = 1;
        for (int i = 2; i <= n; i++) {
            for (int j = 1; j <= i; j++) {
                //对于第i个节点，需要考虑1作为根节点直到i作为根节点的情况，所以需要累加
                //一共i个节点，对于根节点j时,左子树的节点个数为j-1，右子树的节点个数为i-j
                dp[i] += dp[j - 1] * dp[i - j];
            }
        }
        return dp[n];
    }
}
